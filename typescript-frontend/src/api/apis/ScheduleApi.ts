/* tslint:disable */
/* eslint-disable */
/**
 * Schedule API
 * API for scheduling
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmployeeScheduleModel,
} from '../models/index';
import {
    EmployeeScheduleModelFromJSON,
    EmployeeScheduleModelToJSON,
} from '../models/index';

/**
 * 
 */
export class ScheduleApi extends runtime.BaseAPI {

    /**
     * Get Schedule
     */
    async getScheduleScheduleGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmployeeScheduleModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schedule`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeScheduleModelFromJSON(jsonValue));
    }

    /**
     * Get Schedule
     */
    async getScheduleScheduleGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmployeeScheduleModel> {
        const response = await this.getScheduleScheduleGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Publish
     */
    async publishPublishPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/publish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Publish
     */
    async publishPublishPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.publishPublishPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Solve
     */
    async solveSolvePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/solve`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Solve
     */
    async solveSolvePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.solveSolvePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Stop Solving
     */
    async stopSolvingStopSolvingPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stopSolving`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stop Solving
     */
    async stopSolvingStopSolvingPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.stopSolvingStopSolvingPostRaw(initOverrides);
        return await response.value();
    }

}
